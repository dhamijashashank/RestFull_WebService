This Code Run/ Test on following combination:

1.Eclipse	: Neon.1a Release (4.6.1)
2. jdk		: jdk1.8.0_102
3. Tomcat	: apache-tomcat-6.0.37


Previously face following issue : 
Class Not Found Exception : Cause of com.sun.jersey.spi.container.servlet.ServletContainer

Sol: Not able to find root cause , after replacing all (eclipse , jdk , tomcat ) its running fine


Example 1: JAX-RS @Path URI matching example

URI pattern : “/users”

getUser is called
URI pattern : “/users/vip”

getUserVIP is called

URI Pattern : “/users/mkyong”

getUserByName is called, name : mkyong
URI Pattern : “/users/abcdefg”

getUserByName is called, name : abcdefg

URI Pattern : “/users/999”

getUserById is called, id : 999
URI Pattern : “/users/123456”

getUserById is called, id : 123456
URI Pattern : “/users/username/aaa” , failed, don’t match “[a-zA-Z][a-zA-Z_0-9]”, first character need “[a-zA-Z]”, second character need “[a-zA-Z_0-9]”.

Could not find resource for relative : /users/username/aaa
URI Pattern : “/users/username/a9”

getUserByUserName is called, username : a9
URI Pattern : “users/books/999”

getUserBookByISBN is called, isbn : 999

Example 2: JAX-RS @PathParam example Single PathParam and MultiPath Param

In above example, the value of {id} from “/users/{id}” will match to “@PathParam(“id”) String var“.

URI Pattern : “/users/22667788”

getUserById is called, id : 22667788

URI Pattern : “/users/2011/06/30”

getUserHistory is called, year/month/day : 2011/6/30


Example: 3 : JAX-RS-QueryParam-Example 

using @QueryParam , @Context UriInfo info , @DefaultValue("1000") @QueryParam("from") int from


URI Pattern : “users/query?from=100&to=200&orderBy=age&orderBy=name”

getUsers is called, from : 100, to : 200, orderBy[age, name]



URI Pattern : “users/query”

getUsers is called, from : 1000, to : 999, orderBy[name]


Example : 4 JAX-RS @MatrixParam 

@PathParam("year") String year
@MatrixParam("author") String author

See following URI patterns and result.

1. URI Pattern : “/books/2011/”

getBooks is called, year : 2011, author : null, country : null
2. URI Pattern : “/books/2011;author=krishna”

getBooks is called, year : 2011, author : krishna, country : null

3. URI Pattern : “/books/2011;author=krishna;country=malaysia”

getBooks is called, year : 2011, author : krishna, country : malaysia

4. URI Pattern : “/books/2011;country=malaysia;author=krishna”

getBooks is called, year : 2011, author : krishna, country : malaysia

Example : 5 JAX-RS @FormParam

Difference from previous code in web.xml

	<context-param>
		<param-name>resteasy.servlet.mapping.prefix</param-name>
		<param-value>/rest</param-value>
	</context-param>

New annotation used is @FormParam("name") String name

Access HTML Page. URL :  http://localhost:8080/RESTfulExample_5_FormParam/UserForm.html

When “add user” button is clicked, it will redirect to URL : http://localhost:8080/RESTfulExample_5_FormParam/rest/user/add

addUser is called, name : krishna, age : 199


Example : 6 

@HeaderParam("user-agent") String userAgent
@Context HttpHeaders headers

String userAgent = headers.getRequestHeader("user-agent").get(0);

sample of response 
return Response.status(200).entity("addUser is called, userAgent : " + userAgent).build();

if we change status code output also changed like if we pass code 404 output page show : page not found error

http://localhost:8080/RESTfulExample_6_HTTP_Header/users/get


addUser is called, userAgent : Mozilla/5.0 (Windows NT 6.2; Win64; x64; Trident/7.0; rv:11.0) like Gecko

List all request headers 
You can list all available HTTP request headers via following code :
for(String header : headers.getRequestHeaders().keySet()){
	System.out.println(header);
}



Example : 7 Download text file from JAX-RS

@Produces("text/plain")

File file = new File(FILE_PATH);

		ResponseBuilder response = Response.ok((Object) file);
		response.header("Content-Disposition",
			"attachment; filename=\"file_from_server.log\"");
		return response.build();

Deploy above JAX-RS service, access this URI pattern : “/file/get“.

Figure : Text file “D:\\test.log” from server is prompt for user to download, with a new file name “file_from_server.log“


Example : 8 Download image file from JAX-RS

@GET
	@Path("/get")
	@Produces("image/png")
	public Response getFile() {

		File file = new File(FILE_PATH);

		ResponseBuilder response = Response.ok((Object) file);
		response.header("Content-Disposition",
				"attachment; filename=image_from_server.png");
		return response.build();

Deploy above JAX-RS service, access this URI pattern : “/file/get“.

Figure : Image File “D:\\test.png” from server is prompt for user to download, with a new file name “file_from_server.png"